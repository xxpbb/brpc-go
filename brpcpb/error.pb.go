// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: error.proto

package brpcpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Errno int32

const (
	// Errno caused by client
	Errno_ENOSERVICE Errno = 1001 // Service not found
	Errno_ENOMETHOD  Errno = 1002 // Method not found
	Errno_EREQUEST   Errno = 1003 // Bad Request
	Errno_ERPCAUTH   Errno = 1004 // Unauthorized, can't be called EAUTH
	// directly which is defined in MACOSX
	Errno_ETOOMANYFAILS     Errno = 1005 // Too many sub calls failed
	Errno_EPCHANFINISH      Errno = 1006 // [Internal] ParallelChannel finished
	Errno_EBACKUPREQUEST    Errno = 1007 // Sending backup request
	Errno_ERPCTIMEDOUT      Errno = 1008 // RPC call is timed out
	Errno_EFAILEDSOCKET     Errno = 1009 // Broken socket
	Errno_EHTTP             Errno = 1010 // Bad http call
	Errno_EOVERCROWDED      Errno = 1011 // The server is overcrowded
	Errno_ERTMPPUBLISHABLE  Errno = 1012 // RtmpRetryingClientStream is publishable
	Errno_ERTMPCREATESTREAM Errno = 1013 // createStream was rejected by the RTMP server
	Errno_EEOF              Errno = 1014 // Got EOF
	Errno_EUNUSED           Errno = 1015 // The socket was not needed
	Errno_ESSL              Errno = 1016 // SSL related error
	Errno_EH2RUNOUTSTREAMS  Errno = 1017 // The H2 socket was run out of streams
	Errno_EREJECT           Errno = 1018 // The Request is rejected
	// Errno caused by server
	Errno_EINTERNAL Errno = 2001 // Internal Server Error
	Errno_ERESPONSE Errno = 2002 // Bad Response
	Errno_ELOGOFF   Errno = 2003 // Server is stopping
	Errno_ELIMIT    Errno = 2004 // Reached server's limit on resources
	Errno_ECLOSE    Errno = 2005 // Close socket initiatively
	Errno_EITP      Errno = 2006 // Failed Itp response
	// Errno related to RDMA (may happen at both sides)
	Errno_ERDMA    Errno = 3001 // RDMA verbs error
	Errno_ERDMAMEM Errno = 3002 // Memory not registered for RDMA
)

// Enum value maps for Errno.
var (
	Errno_name = map[int32]string{
		1001: "ENOSERVICE",
		1002: "ENOMETHOD",
		1003: "EREQUEST",
		1004: "ERPCAUTH",
		1005: "ETOOMANYFAILS",
		1006: "EPCHANFINISH",
		1007: "EBACKUPREQUEST",
		1008: "ERPCTIMEDOUT",
		1009: "EFAILEDSOCKET",
		1010: "EHTTP",
		1011: "EOVERCROWDED",
		1012: "ERTMPPUBLISHABLE",
		1013: "ERTMPCREATESTREAM",
		1014: "EEOF",
		1015: "EUNUSED",
		1016: "ESSL",
		1017: "EH2RUNOUTSTREAMS",
		1018: "EREJECT",
		2001: "EINTERNAL",
		2002: "ERESPONSE",
		2003: "ELOGOFF",
		2004: "ELIMIT",
		2005: "ECLOSE",
		2006: "EITP",
		3001: "ERDMA",
		3002: "ERDMAMEM",
	}
	Errno_value = map[string]int32{
		"ENOSERVICE":        1001,
		"ENOMETHOD":         1002,
		"EREQUEST":          1003,
		"ERPCAUTH":          1004,
		"ETOOMANYFAILS":     1005,
		"EPCHANFINISH":      1006,
		"EBACKUPREQUEST":    1007,
		"ERPCTIMEDOUT":      1008,
		"EFAILEDSOCKET":     1009,
		"EHTTP":             1010,
		"EOVERCROWDED":      1011,
		"ERTMPPUBLISHABLE":  1012,
		"ERTMPCREATESTREAM": 1013,
		"EEOF":              1014,
		"EUNUSED":           1015,
		"ESSL":              1016,
		"EH2RUNOUTSTREAMS":  1017,
		"EREJECT":           1018,
		"EINTERNAL":         2001,
		"ERESPONSE":         2002,
		"ELOGOFF":           2003,
		"ELIMIT":            2004,
		"ECLOSE":            2005,
		"EITP":              2006,
		"ERDMA":             3001,
		"ERDMAMEM":          3002,
	}
)

func (x Errno) Enum() *Errno {
	p := new(Errno)
	*p = x
	return p
}

func (x Errno) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Errno) Descriptor() protoreflect.EnumDescriptor {
	return file_error_proto_enumTypes[0].Descriptor()
}

func (Errno) Type() protoreflect.EnumType {
	return &file_error_proto_enumTypes[0]
}

func (x Errno) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Errno) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Errno(num)
	return nil
}

// Deprecated: Use Errno.Descriptor instead.
func (Errno) EnumDescriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{0}
}

var File_error_proto protoreflect.FileDescriptor

var file_error_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x62,
	0x72, 0x70, 0x63, 0x2a, 0xae, 0x03, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6e, 0x6f, 0x12, 0x0f, 0x0a,
	0x0a, 0x45, 0x4e, 0x4f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0xe9, 0x07, 0x12, 0x0e,
	0x0a, 0x09, 0x45, 0x4e, 0x4f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0xea, 0x07, 0x12, 0x0d,
	0x0a, 0x08, 0x45, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xeb, 0x07, 0x12, 0x0d, 0x0a,
	0x08, 0x45, 0x52, 0x50, 0x43, 0x41, 0x55, 0x54, 0x48, 0x10, 0xec, 0x07, 0x12, 0x12, 0x0a, 0x0d,
	0x45, 0x54, 0x4f, 0x4f, 0x4d, 0x41, 0x4e, 0x59, 0x46, 0x41, 0x49, 0x4c, 0x53, 0x10, 0xed, 0x07,
	0x12, 0x11, 0x0a, 0x0c, 0x45, 0x50, 0x43, 0x48, 0x41, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x10, 0xee, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xef, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x45, 0x52, 0x50, 0x43,
	0x54, 0x49, 0x4d, 0x45, 0x44, 0x4f, 0x55, 0x54, 0x10, 0xf0, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x45,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0xf1, 0x07, 0x12,
	0x0a, 0x0a, 0x05, 0x45, 0x48, 0x54, 0x54, 0x50, 0x10, 0xf2, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x45,
	0x4f, 0x56, 0x45, 0x52, 0x43, 0x52, 0x4f, 0x57, 0x44, 0x45, 0x44, 0x10, 0xf3, 0x07, 0x12, 0x15,
	0x0a, 0x10, 0x45, 0x52, 0x54, 0x4d, 0x50, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0xf4, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x52, 0x54, 0x4d, 0x50, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0xf5, 0x07, 0x12, 0x09, 0x0a,
	0x04, 0x45, 0x45, 0x4f, 0x46, 0x10, 0xf6, 0x07, 0x12, 0x0c, 0x0a, 0x07, 0x45, 0x55, 0x4e, 0x55,
	0x53, 0x45, 0x44, 0x10, 0xf7, 0x07, 0x12, 0x09, 0x0a, 0x04, 0x45, 0x53, 0x53, 0x4c, 0x10, 0xf8,
	0x07, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x48, 0x32, 0x52, 0x55, 0x4e, 0x4f, 0x55, 0x54, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x53, 0x10, 0xf9, 0x07, 0x12, 0x0c, 0x0a, 0x07, 0x45, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x10, 0xfa, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x45, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0xd1, 0x0f, 0x12, 0x0e, 0x0a, 0x09, 0x45, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0xd2, 0x0f, 0x12, 0x0c, 0x0a, 0x07, 0x45, 0x4c, 0x4f, 0x47, 0x4f, 0x46,
	0x46, 0x10, 0xd3, 0x0f, 0x12, 0x0b, 0x0a, 0x06, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xd4,
	0x0f, 0x12, 0x0b, 0x0a, 0x06, 0x45, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0xd5, 0x0f, 0x12, 0x09,
	0x0a, 0x04, 0x45, 0x49, 0x54, 0x50, 0x10, 0xd6, 0x0f, 0x12, 0x0a, 0x0a, 0x05, 0x45, 0x52, 0x44,
	0x4d, 0x41, 0x10, 0xb9, 0x17, 0x12, 0x0d, 0x0a, 0x08, 0x45, 0x52, 0x44, 0x4d, 0x41, 0x4d, 0x45,
	0x4d, 0x10, 0xba, 0x17, 0x42, 0x41, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x72, 0x70, 0x63,
	0x42, 0x0d, 0x42, 0x61, 0x69, 0x64, 0x75, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6e, 0x6f, 0x5a,
	0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x78, 0x70, 0x62,
	0x62, 0x2f, 0x62, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x6f, 0x2f, 0x62, 0x72, 0x70, 0x63, 0x70, 0x62,
	0x3b, 0x62, 0x72, 0x70, 0x63, 0x70, 0x62,
}

var (
	file_error_proto_rawDescOnce sync.Once
	file_error_proto_rawDescData = file_error_proto_rawDesc
)

func file_error_proto_rawDescGZIP() []byte {
	file_error_proto_rawDescOnce.Do(func() {
		file_error_proto_rawDescData = protoimpl.X.CompressGZIP(file_error_proto_rawDescData)
	})
	return file_error_proto_rawDescData
}

var file_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_error_proto_goTypes = []interface{}{
	(Errno)(0), // 0: brpc.Errno
}
var file_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_error_proto_init() }
func file_error_proto_init() {
	if File_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_error_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_error_proto_goTypes,
		DependencyIndexes: file_error_proto_depIdxs,
		EnumInfos:         file_error_proto_enumTypes,
	}.Build()
	File_error_proto = out.File
	file_error_proto_rawDesc = nil
	file_error_proto_goTypes = nil
	file_error_proto_depIdxs = nil
}
