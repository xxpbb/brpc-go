// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: options.proto

package brpcpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TalkType int32

const (
	TalkType_TALK_TYPE_NORMAL TalkType = 0
	TalkType_TALK_TYPE_ONEWAY TalkType = 1
)

// Enum value maps for TalkType.
var (
	TalkType_name = map[int32]string{
		0: "TALK_TYPE_NORMAL",
		1: "TALK_TYPE_ONEWAY",
	}
	TalkType_value = map[string]int32{
		"TALK_TYPE_NORMAL": 0,
		"TALK_TYPE_ONEWAY": 1,
	}
)

func (x TalkType) Enum() *TalkType {
	p := new(TalkType)
	*p = x
	return p
}

func (x TalkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TalkType) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[0].Descriptor()
}

func (TalkType) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[0]
}

func (x TalkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TalkType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TalkType(num)
	return nil
}

// Deprecated: Use TalkType.Descriptor instead.
func (TalkType) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{0}
}

type ConnectionType int32

const (
	// bit-exclusive values since we may OR them to represent supported types.
	ConnectionType_CONNECTION_TYPE_UNKNOWN ConnectionType = 0
	ConnectionType_CONNECTION_TYPE_SINGLE  ConnectionType = 1
	ConnectionType_CONNECTION_TYPE_POOLED  ConnectionType = 2
	ConnectionType_CONNECTION_TYPE_SHORT   ConnectionType = 4
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNKNOWN",
		1: "CONNECTION_TYPE_SINGLE",
		2: "CONNECTION_TYPE_POOLED",
		4: "CONNECTION_TYPE_SHORT",
	}
	ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNKNOWN": 0,
		"CONNECTION_TYPE_SINGLE":  1,
		"CONNECTION_TYPE_POOLED":  2,
		"CONNECTION_TYPE_SHORT":   4,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[1].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[1]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConnectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConnectionType(num)
	return nil
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{1}
}

type ProtocolType int32

const (
	ProtocolType_PROTOCOL_UNKNOWN           ProtocolType = 0
	ProtocolType_PROTOCOL_BAIDU_STD         ProtocolType = 1
	ProtocolType_PROTOCOL_STREAMING_RPC     ProtocolType = 2
	ProtocolType_PROTOCOL_HULU_PBRPC        ProtocolType = 3
	ProtocolType_PROTOCOL_SOFA_PBRPC        ProtocolType = 4
	ProtocolType_PROTOCOL_RTMP              ProtocolType = 5
	ProtocolType_PROTOCOL_THRIFT            ProtocolType = 6
	ProtocolType_PROTOCOL_HTTP              ProtocolType = 7
	ProtocolType_PROTOCOL_PUBLIC_PBRPC      ProtocolType = 8
	ProtocolType_PROTOCOL_NOVA_PBRPC        ProtocolType = 9
	ProtocolType_PROTOCOL_REDIS             ProtocolType = 10
	ProtocolType_PROTOCOL_NSHEAD_CLIENT     ProtocolType = 11 // implemented in baidu-rpc-ub
	ProtocolType_PROTOCOL_NSHEAD            ProtocolType = 12
	ProtocolType_PROTOCOL_HADOOP_RPC        ProtocolType = 13
	ProtocolType_PROTOCOL_HADOOP_SERVER_RPC ProtocolType = 14
	ProtocolType_PROTOCOL_MONGO             ProtocolType = 15 // server side only
	ProtocolType_PROTOCOL_UBRPC_COMPACK     ProtocolType = 16
	ProtocolType_PROTOCOL_DIDX_CLIENT       ProtocolType = 17 // Client side only
	ProtocolType_PROTOCOL_MEMCACHE          ProtocolType = 18 // Client side only
	ProtocolType_PROTOCOL_ITP               ProtocolType = 19
	ProtocolType_PROTOCOL_NSHEAD_MCPACK     ProtocolType = 20
	ProtocolType_PROTOCOL_DISP_IDL          ProtocolType = 21 // Client side only
	ProtocolType_PROTOCOL_ERSDA_CLIENT      ProtocolType = 22 // Client side only
	ProtocolType_PROTOCOL_UBRPC_MCPACK2     ProtocolType = 23 // Client side only
	// Reserve special protocol for cds-agent, which depends on FIFO right now
	ProtocolType_PROTOCOL_CDS_AGENT ProtocolType = 24 // Client side only
	ProtocolType_PROTOCOL_ESP       ProtocolType = 25 // Client side only
	ProtocolType_PROTOCOL_H2        ProtocolType = 26
)

// Enum value maps for ProtocolType.
var (
	ProtocolType_name = map[int32]string{
		0:  "PROTOCOL_UNKNOWN",
		1:  "PROTOCOL_BAIDU_STD",
		2:  "PROTOCOL_STREAMING_RPC",
		3:  "PROTOCOL_HULU_PBRPC",
		4:  "PROTOCOL_SOFA_PBRPC",
		5:  "PROTOCOL_RTMP",
		6:  "PROTOCOL_THRIFT",
		7:  "PROTOCOL_HTTP",
		8:  "PROTOCOL_PUBLIC_PBRPC",
		9:  "PROTOCOL_NOVA_PBRPC",
		10: "PROTOCOL_REDIS",
		11: "PROTOCOL_NSHEAD_CLIENT",
		12: "PROTOCOL_NSHEAD",
		13: "PROTOCOL_HADOOP_RPC",
		14: "PROTOCOL_HADOOP_SERVER_RPC",
		15: "PROTOCOL_MONGO",
		16: "PROTOCOL_UBRPC_COMPACK",
		17: "PROTOCOL_DIDX_CLIENT",
		18: "PROTOCOL_MEMCACHE",
		19: "PROTOCOL_ITP",
		20: "PROTOCOL_NSHEAD_MCPACK",
		21: "PROTOCOL_DISP_IDL",
		22: "PROTOCOL_ERSDA_CLIENT",
		23: "PROTOCOL_UBRPC_MCPACK2",
		24: "PROTOCOL_CDS_AGENT",
		25: "PROTOCOL_ESP",
		26: "PROTOCOL_H2",
	}
	ProtocolType_value = map[string]int32{
		"PROTOCOL_UNKNOWN":           0,
		"PROTOCOL_BAIDU_STD":         1,
		"PROTOCOL_STREAMING_RPC":     2,
		"PROTOCOL_HULU_PBRPC":        3,
		"PROTOCOL_SOFA_PBRPC":        4,
		"PROTOCOL_RTMP":              5,
		"PROTOCOL_THRIFT":            6,
		"PROTOCOL_HTTP":              7,
		"PROTOCOL_PUBLIC_PBRPC":      8,
		"PROTOCOL_NOVA_PBRPC":        9,
		"PROTOCOL_REDIS":             10,
		"PROTOCOL_NSHEAD_CLIENT":     11,
		"PROTOCOL_NSHEAD":            12,
		"PROTOCOL_HADOOP_RPC":        13,
		"PROTOCOL_HADOOP_SERVER_RPC": 14,
		"PROTOCOL_MONGO":             15,
		"PROTOCOL_UBRPC_COMPACK":     16,
		"PROTOCOL_DIDX_CLIENT":       17,
		"PROTOCOL_MEMCACHE":          18,
		"PROTOCOL_ITP":               19,
		"PROTOCOL_NSHEAD_MCPACK":     20,
		"PROTOCOL_DISP_IDL":          21,
		"PROTOCOL_ERSDA_CLIENT":      22,
		"PROTOCOL_UBRPC_MCPACK2":     23,
		"PROTOCOL_CDS_AGENT":         24,
		"PROTOCOL_ESP":               25,
		"PROTOCOL_H2":                26,
	}
)

func (x ProtocolType) Enum() *ProtocolType {
	p := new(ProtocolType)
	*p = x
	return p
}

func (x ProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[2].Descriptor()
}

func (ProtocolType) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[2]
}

func (x ProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtocolType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtocolType(num)
	return nil
}

// Deprecated: Use ProtocolType.Descriptor instead.
func (ProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{2}
}

type CompressType int32

const (
	CompressType_COMPRESS_TYPE_NONE   CompressType = 0
	CompressType_COMPRESS_TYPE_SNAPPY CompressType = 1
	CompressType_COMPRESS_TYPE_GZIP   CompressType = 2
	CompressType_COMPRESS_TYPE_ZLIB   CompressType = 3
	CompressType_COMPRESS_TYPE_LZ4    CompressType = 4
)

// Enum value maps for CompressType.
var (
	CompressType_name = map[int32]string{
		0: "COMPRESS_TYPE_NONE",
		1: "COMPRESS_TYPE_SNAPPY",
		2: "COMPRESS_TYPE_GZIP",
		3: "COMPRESS_TYPE_ZLIB",
		4: "COMPRESS_TYPE_LZ4",
	}
	CompressType_value = map[string]int32{
		"COMPRESS_TYPE_NONE":   0,
		"COMPRESS_TYPE_SNAPPY": 1,
		"COMPRESS_TYPE_GZIP":   2,
		"COMPRESS_TYPE_ZLIB":   3,
		"COMPRESS_TYPE_LZ4":    4,
	}
)

func (x CompressType) Enum() *CompressType {
	p := new(CompressType)
	*p = x
	return p
}

func (x CompressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressType) Descriptor() protoreflect.EnumDescriptor {
	return file_options_proto_enumTypes[3].Descriptor()
}

func (CompressType) Type() protoreflect.EnumType {
	return &file_options_proto_enumTypes[3]
}

func (x CompressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CompressType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CompressType(num)
	return nil
}

// Deprecated: Use CompressType.Descriptor instead.
func (CompressType) EnumDescriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{3}
}

type ChunkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId *int64 `protobuf:"varint,1,req,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	ChunkId  *int64 `protobuf:"varint,2,req,name=chunk_id,json=chunkId" json:"chunk_id,omitempty"`
}

func (x *ChunkInfo) Reset() {
	*x = ChunkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_options_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkInfo) ProtoMessage() {}

func (x *ChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_options_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkInfo.ProtoReflect.Descriptor instead.
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return file_options_proto_rawDescGZIP(), []int{0}
}

func (x *ChunkInfo) GetStreamId() int64 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *ChunkInfo) GetChunkId() int64 {
	if x != nil && x.ChunkId != nil {
		return *x.ChunkId
	}
	return 0
}

var file_options_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         90000,
		Name:          "brpc.service_timeout",
		Tag:           "varint,90000,opt,name=service_timeout,def=10000",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*TalkType)(nil),
		Field:         90001,
		Name:          "brpc.request_talk_type",
		Tag:           "varint,90001,opt,name=request_talk_type,enum=brpc.TalkType,def=0",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*TalkType)(nil),
		Field:         90002,
		Name:          "brpc.response_talk_type",
		Tag:           "varint,90002,opt,name=response_talk_type,enum=brpc.TalkType,def=0",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         90003,
		Name:          "brpc.method_timeout",
		Tag:           "varint,90003,opt,name=method_timeout",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*CompressType)(nil),
		Field:         90004,
		Name:          "brpc.request_compression",
		Tag:           "varint,90004,opt,name=request_compression,enum=brpc.CompressType,def=0",
		Filename:      "options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*CompressType)(nil),
		Field:         90005,
		Name:          "brpc.response_compression",
		Tag:           "varint,90005,opt,name=response_compression,enum=brpc.CompressType,def=0",
		Filename:      "options.proto",
	},
}

// Extension fields to descriptorpb.ServiceOptions.
var (
	// Timeout in milliseconds, at service level.
	//
	// optional int64 service_timeout = 90000;
	E_ServiceTimeout = &file_options_proto_extTypes[0]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// Talk type.
	//
	// optional brpc.TalkType request_talk_type = 90001;
	E_RequestTalkType = &file_options_proto_extTypes[1]
	// optional brpc.TalkType response_talk_type = 90002;
	E_ResponseTalkType = &file_options_proto_extTypes[2]
	// If set, override service_timeout.
	//
	// optional int64 method_timeout = 90003;
	E_MethodTimeout = &file_options_proto_extTypes[3]
	// Compression for request/response.
	//
	// optional brpc.CompressType request_compression = 90004;
	E_RequestCompression = &file_options_proto_extTypes[4]
	// optional brpc.CompressType response_compression = 90005;
	E_ResponseCompression = &file_options_proto_extTypes[5]
)

var File_options_proto protoreflect.FileDescriptor

var file_options_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x62, 0x72, 0x70, 0x63, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x2a, 0x36, 0x0a, 0x08,
	0x54, 0x61, 0x6c, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x4c, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x57,
	0x41, 0x59, 0x10, 0x01, 0x2a, 0x80, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x2a, 0x8f, 0x05, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x42, 0x41, 0x49, 0x44, 0x55,
	0x5f, 0x53, 0x54, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x50, 0x43,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x48,
	0x55, 0x4c, 0x55, 0x5f, 0x50, 0x42, 0x52, 0x50, 0x43, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x4f, 0x46, 0x41, 0x5f, 0x50, 0x42, 0x52,
	0x50, 0x43, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x52, 0x54, 0x4d, 0x50, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x54, 0x48, 0x52, 0x49, 0x46, 0x54, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x07, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x5f, 0x50, 0x42, 0x52, 0x50, 0x43, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x56, 0x41, 0x5f, 0x50, 0x42, 0x52, 0x50,
	0x43, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x52, 0x45, 0x44, 0x49, 0x53, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x4e, 0x53, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x4e, 0x53, 0x48, 0x45, 0x41, 0x44, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x48, 0x41, 0x44, 0x4f, 0x4f, 0x50, 0x5f, 0x52, 0x50, 0x43, 0x10,
	0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x48, 0x41,
	0x44, 0x4f, 0x4f, 0x50, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x50, 0x43, 0x10,
	0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f,
	0x4e, 0x47, 0x4f, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x55, 0x42, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x4b, 0x10,
	0x10, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x44, 0x49,
	0x44, 0x58, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4d, 0x45, 0x4d, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49,
	0x54, 0x50, 0x10, 0x13, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x4e, 0x53, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x43, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x14,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x5f, 0x49, 0x44, 0x4c, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x45, 0x52, 0x53, 0x44, 0x41, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55,
	0x42, 0x52, 0x50, 0x43, 0x5f, 0x4d, 0x43, 0x50, 0x41, 0x43, 0x4b, 0x32, 0x10, 0x17, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x43, 0x44, 0x53, 0x5f, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x45, 0x53, 0x50, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x48, 0x32, 0x10, 0x1a, 0x2a, 0x87, 0x01, 0x0a, 0x0c, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f,
	0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x5a,
	0x49, 0x50, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x4c, 0x49, 0x42, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x5a,
	0x34, 0x10, 0x04, 0x3a, 0x51, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x90, 0xbf, 0x05, 0x20, 0x01, 0x28, 0x03, 0x3a,
	0x05, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3a, 0x6e, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x91, 0xbf, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x10, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61,
	0x6c, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x70, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x92, 0xbf, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x6c, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x54, 0x41, 0x4c, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x61, 0x6c, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x47, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x93, 0xbf, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x3a, 0x79, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x94, 0xbf, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x62, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x7b, 0x0a, 0x14,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x95, 0xbf, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x12, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x2e, 0x62, 0x72, 0x70, 0x63, 0x42, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5a, 0x26,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x78, 0x70, 0x62, 0x62,
	0x2f, 0x62, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x6f, 0x2f, 0x62, 0x72, 0x70, 0x63, 0x70, 0x62, 0x3b,
	0x62, 0x72, 0x70, 0x63, 0x70, 0x62,
}

var (
	file_options_proto_rawDescOnce sync.Once
	file_options_proto_rawDescData = file_options_proto_rawDesc
)

func file_options_proto_rawDescGZIP() []byte {
	file_options_proto_rawDescOnce.Do(func() {
		file_options_proto_rawDescData = protoimpl.X.CompressGZIP(file_options_proto_rawDescData)
	})
	return file_options_proto_rawDescData
}

var file_options_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_options_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_options_proto_goTypes = []interface{}{
	(TalkType)(0),                       // 0: brpc.TalkType
	(ConnectionType)(0),                 // 1: brpc.ConnectionType
	(ProtocolType)(0),                   // 2: brpc.ProtocolType
	(CompressType)(0),                   // 3: brpc.CompressType
	(*ChunkInfo)(nil),                   // 4: brpc.ChunkInfo
	(*descriptorpb.ServiceOptions)(nil), // 5: google.protobuf.ServiceOptions
	(*descriptorpb.MethodOptions)(nil),  // 6: google.protobuf.MethodOptions
}
var file_options_proto_depIdxs = []int32{
	5,  // 0: brpc.service_timeout:extendee -> google.protobuf.ServiceOptions
	6,  // 1: brpc.request_talk_type:extendee -> google.protobuf.MethodOptions
	6,  // 2: brpc.response_talk_type:extendee -> google.protobuf.MethodOptions
	6,  // 3: brpc.method_timeout:extendee -> google.protobuf.MethodOptions
	6,  // 4: brpc.request_compression:extendee -> google.protobuf.MethodOptions
	6,  // 5: brpc.response_compression:extendee -> google.protobuf.MethodOptions
	0,  // 6: brpc.request_talk_type:type_name -> brpc.TalkType
	0,  // 7: brpc.response_talk_type:type_name -> brpc.TalkType
	3,  // 8: brpc.request_compression:type_name -> brpc.CompressType
	3,  // 9: brpc.response_compression:type_name -> brpc.CompressType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	6,  // [6:10] is the sub-list for extension type_name
	0,  // [0:6] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_options_proto_init() }
func file_options_proto_init() {
	if File_options_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_options_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_options_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   1,
			NumExtensions: 6,
			NumServices:   0,
		},
		GoTypes:           file_options_proto_goTypes,
		DependencyIndexes: file_options_proto_depIdxs,
		EnumInfos:         file_options_proto_enumTypes,
		MessageInfos:      file_options_proto_msgTypes,
		ExtensionInfos:    file_options_proto_extTypes,
	}.Build()
	File_options_proto = out.File
	file_options_proto_rawDesc = nil
	file_options_proto_goTypes = nil
	file_options_proto_depIdxs = nil
}
